---
const { title, desc, href, tags = [], image } = Astro.props;
const base = import.meta.env.BASE_URL;

// Normaliza la imagen:
// - http(s) o que ya tenga base → se respeta.
// - '/algo' → base + 'algo'
// - 'algo'  → base + 'algo'
// - undefined → placeholder en public/assets/
function withBase(p?: string): string {
  if (!p) return `${base}assets/placeholder.svg`;
  if (typeof p !== 'string') return `${base}assets/placeholder.svg`;
  if (p.startsWith('http')) return p;
  if (p.startsWith(base)) return p;
  if (p.startsWith('/')) return `${base}${p.slice(1)}`;
  return `${base}${p}`;
}
const resolvedImage = withBase(image);
---
<article class="glass p-5 hover:scale-[1.01] transition">
  <img src={resolvedImage} alt={title} class="rounded-lg w-full h-44 object-cover mb-4" loading="lazy" />
  <h3 class="text-lg font-semibold">{title}</h3>
  <p class="text-[15px] text-[var(--muted)] mt-1">{desc}</p>
  <div class="mt-3 flex gap-2 flex-wrap">
    {tags.map((t: string) => <span class="text-[12px] px-2 py-1 rounded border/40 border">{t}</span>)}
  </div>
  <a href={href} class="inline-block mt-4 text-sm underline">Abrir proyecto →</a>
</article>
